document()
load_all(".")
simbinary(20)
?simcont
?logit
?bencalibr
# continuous outcome
dat1=simcont(200)$dat
head(dat1)
lm1=lm(y.observed~(x1+x2+x3)*t, data=dat1)
dat.t0=dat1; dat.t0$t=0
dat.t1=dat1; dat.t1$t=1
dat1$predict.treat.1=predict(lm1, newdata = dat.t1) # predictions in treatment
dat1$predict.treat.0=predict(lm1, newdata = dat.t0) # predicions in control
bencalibr(data=dat1, Ngroups=10, y.observed, predicted.treat.1=predict.treat.1,
predicted.treat.0=predict.treat.0, type="continuous", treat=t,
smoothing.function = "lm")
##### predcompare
dat1=simcont(500)$dat
lm1=lm(y.observed~(x1+x2+x3)*t, data=dat1)
dat.t0=dat1; dat.t0$t=0 # a dataset
dat.t1=dat1; dat.t1$t=1
dat1$predict.treat.1=predict(lm1, newdata = dat.t1) # predictions in treatment
dat1$predict.treat.0=predict(lm1, newdata = dat.t0) # predicions in control
predcompare(repeats=20, Ngroups=c(5:10), X=dat1[,c("x1", "x2","x3")],
Y=dat1$y.observed,
predicted.treat.1 = dat1$predict.treat.1,
predicted.treat.0 = dat1$predict.treat.0,
treat=dat1$t, type="continuous")
# continuous outcome
dat1=simcont(500)$dat
lm1=lm(y.observed~(x1+x2+x3)*t, data=dat1)
dat.t0=dat1; dat.t0$t=0 # a dataset
dat.t1=dat1; dat.t1$t=1
dat1$predict.treat.1=predict(lm1, newdata = dat.t1) # predictions in treatment
dat1$predict.treat.0=predict(lm1, newdata = dat.t0) # predicions in control
predcompare(repeats=20, Ngroups=c(5:10), X=dat1[,c("x1", "x2","x3")],
Y=dat1$y.observed,
predicted.treat.1 = dat1$predict.treat.1,
predicted.treat.0 = dat1$predict.treat.0,
treat=dat1$t, type="continuous")
# binary outcome
dat2=simbinary(300)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
dat2=simbinary(800)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
predcompare(repeats=20, Ngroups=c(5:10), X=dat1[,c("x1", "x2","x3")],
Y=dat1$y.observed,
predicted.treat.1 = dat1$predict.treat.1,
predicted.treat.0 = dat1$predict.treat.0,
treat=dat1$t, type="binary", measure="RD")
predcompare(repeats=20, Ngroups=c(5:10), X=dat2[,c("x1", "x2","x3")],
Y=dat2$y.observed,
predicted.treat.1 = dat2$predict.treat.1,
predicted.treat.0 = dat2$predict.treat.0,
treat=dat2$t, type="binary", measure="RD")
predcompare(repeats=20, Ngroups=c(5:10), X=dat2[,c("x1", "x2","x3")],
Y=dat2$y.observed,
predicted.treat.1 = dat2$predict.treat.1,
predicted.treat.0 = dat2$predict.treat.0,
treat=dat2$t, type="binary", measure="logor")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
document()
load_all(".")
simbinary(20)
?simcont
?logit
?bencalibr
?predcomare
?predcompare
library(devtools) # Make sure that the devtools library is loaded
install_github("esm-ispm-unibe-ch-REPRODUCIBLE/calibration_benefit");
library(predcomp)
?simcont
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/calibration_benefit")
setwd("C:/Users/efthimiou/Google Drive/PROJECT/calibration for benefit for prediction models/calibration_benefit")
load_all(".")
library("devtools")
library("roxygen2")
install.packages("roxygen2")
setwd("C:/Users/efthimiou/Google Drive/PROJECT/calibration for benefit for prediction models/calibration_benefit")
load_all(".")
?simbinary
View(simbinary)
library(devtools)
check()
?predcompare
?bencalibr
dat1=simcont(200)$dat
head(dat1)
lm1=lm(y.observed~(x1+x2+x3)*t, data=dat1)
dat.t0=dat1; dat.t0$t=0
dat.t1=dat1; dat.t1$t=1
dat1$predict.treat.1=predict(lm1, newdata = dat.t1) # predictions in treatment
dat1$predict.treat.0=predict(lm1, newdata = dat.t0) # predicions in control
bencalibr(data=dat1, Ngroups=10, y.observed, predicted.treat.1=predict.treat.1,
predicted.treat.0=predict.treat.0, type="continuous", treat=t,
smoothing.function = "lm", axis.limits = c(-1, 1.3))
#
# binary outcome
dat2=simbinary(300)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=predict.treat.1,
predicted.treat.0=predict.treat.0, type="binary", treat=t,
smoothing.function = "lm", measure="logor")
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=predict.treat.1,
predicted.treat.0=predict.treat.0, type="binary", treat=t,
smoothing.function = "lm", measure="RD")
# binary outcome
dat2=simbinary(5000)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=predict.treat.1,
predicted.treat.0=predict.treat.0, type="binary", treat=t,
smoothing.function = "lm", measure="logor")
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=predict.treat.1,
predicted.treat.0=predict.treat.0, type="binary", treat=t,
smoothing.function = "lm", measure="RD")
# continuous outcome
dat1=simcont(200)$dat
head(dat1)
lm1=lm(y.observed~(x1+x2+x3)*t, data=dat1)
dat.t0=dat1; dat.t0$t=0
dat.t1=dat1; dat.t1$t=1
dat1$predict.treat.1=predict(lm1, newdata = dat.t1) # predictions in treatment
dat1$predict.treat.0=predict(lm1, newdata = dat.t0) # predicions in control
bencalibr(data=dat1, Ngroups=10, y.observed, predicted.treat.1=predict.treat.1,
predicted.treat.0=predict.treat.0, type="continuous", treat=t,
smoothing.function = "lm", axis.limits = c(-1, 1.3))
library(devtools)
check()
library(devtools)
check()
simcont(200)$dat
library(MASS)
library(devtools)
check()
install.packages("testthat")
library(testthat)
test)
test()
library(devtools)
test)
test()
test_coverage()
rhub::check_for_cran()
install.packages("rhub")
rhub::check_for_cran()
library(devtools)
check()
dat.in=dat1[sample(rownames(dat1), 400,]
??createfolds
folds <- cut(seq(1,nrow(dat1)),breaks=10,labels=FALSE)
dat1=simcont(500)$dat
#Create 10 equally size folds
folds <- cut(seq(1,nrow(dat1)),breaks=10,labels=FALSE)
dat1=simcont(500)$dat
library(predcomp)
dat1=simcont(500)$dat
#Randomly shuffle the data
yourData<-yourData[sample(nrow(yourData)),]
#Randomly shuffle the data
yourData<-yourData[sample(nrow(dat1)),]
yourData<-dat1[sample(nrow(dat1)),]
yourData
#Create 10 equally size folds
folds <- cut(seq(1,nrow(dat1)),breaks=10,labels=FALSE)
folds
#Randomly shuffle the data
yourData<-dat1[sample(nrow(dat1)),]
?precompare
library(predcomp)
?predcompare
library(predcomp)
dat1=simcont(500)$dat
#Randomly shuffle the data
dat1<-dat1[sample(nrow(dat1)),]
folds <- cut(seq(1,nrow(dat1)),breaks=10,labels=FALSE)
folds
library(predcomp)
dat=simcont(500)$dat
#Randomly shuffle the data
dat<-dat[sample(nrow(dat)),]
dat
folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
folds
dat0=simcont(500)$dat
#Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:k.folds){
dat.in.CV=dat1[-flds[[i]],]
dat.out.CV[[i]]=dat1[flds[[i]],]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
}
dat0=simcont(500)$dat
#Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat1[-folds[[i]],]
dat.out.CV[[i]]=dat1[folds[[i]],]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:k.folds){
dat.CV=rbind(dat.CV,dat.out.CV[[i]] )
}
dat0=simcont(500)$dat
#Randomly shuffle the data
dat1<-dat0[sample(nrow(dat0)),]
folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat1[-folds[[i]],]
dat.out.CV[[i]]=dat1[folds[[i]],]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:k.folds){
dat.CV=rbind(dat.CV,dat.out.CV[[i]] )
}
dat.in.CV=dat1[-folds[[i]],]
dat.in.CV
folds
dat0=simcont(500)$dat
#Randomly shuffle the data
dat1<-dat0[sample(nrow(dat0)),]
dat1$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat1[dat1$folds!=i,]
dat.out.CV[[i]]=dat1[dat1$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){
dat.CV=rbind(dat.CV,dat.out.CV[[i]] )
}
dat1$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
dat1
#Randomly shuffle the data
dat1<-dat0[sample(nrow(dat0)),]
dat1
dat0=simcont(500)$dat
dat0=simcont(500)$dat
#Randomly shuffle the data
dat1<-dat0[sample(nrow(dat0)),]
dat1$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
dat1$folds <- cut(seq(1,nrow(dat1)),breaks=10,labels=FALSE)
dat1
# obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat1[dat1$folds!=i,]
dat.out.CV[[i]]=dat1[dat1$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){
dat.CV=rbind(dat.CV,dat.out.CV[[i]] )
}
dat.in.CV=dat1[dat1$folds!=i,]
dat.in.CV
dat1$folds
dat0=simcont(500)$dat
#Randomly shuffle the data
dat1<-dat0[sample(nrow(dat0)),]
dat1$folds <- cut(seq(1,nrow(dat1)),breaks=10,labels=FALSE)
dat1$folds
# obtain out-of-sample predictions
dat.out.CV<-list()
i=1
dat.in.CV=dat1[dat1$folds!=i,]
dat.in.CV
dat.out.CV[[i]]=dat1[dat1$folds==i,]
dat.out.CV
dat.in.CV=dat1[dat1$folds!=i,]
dat.out.CV[[i]]=dat1[dat1$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
for (i in 1:10){
dat.in.CV=dat1[dat1$folds!=i,]
dat.out.CV[[i]]=dat1[dat1$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
}
i
i=1
dat.in.CV=dat1[dat1$folds!=i,]
dat.out.CV[[i]]=dat1[dat1$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.in.CV
dat1$folds
dat1$folds
dat0=simcont(500)$dat
#Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat1[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat1$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){
dat.CV=rbind(dat.CV,dat.out.CV[[i]] )
}
dat0=simcont(500)$dat
#Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
dat$folds
dat0=simcont(500)$dat
#Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat1$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){
dat.CV=rbind(dat.CV,dat.out.CV[[i]] )
}
dat.in.CV=dat[dat$folds!=i,]
dat.in.CV
dat0=simcont(500)$dat
#Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){
dat.CV=rbind(dat.CV,dat.out.CV[[i]] )
}
predcompare(repeats=20, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = dat.CV$predict.treat.1,
predicted.treat.0 = dat.CV$predict.treat.0,
treat=dat.CV$t, type="continuous")
dat.CV$y.observed
dat.CV[,c("x1", "x2","x3")]
dat.CV$predict.treat.1
dat0=simcont(500)$dat
#Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$predict.treat.1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$predict.treat.0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){
dat.CV=rbind(dat.CV,dat.out.CV[[i]] )
}
predcompare(repeats=20, Ngroups=c(5:10),
X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = dat.CV$predict.treat.1,
predicted.treat.0 = dat.CV$predict.treat.0,
treat=dat.CV$t, type="continuous")
dat0=simcont(500)$dat
head(dat0)
# Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
# Create random folds
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# Obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$predict.treat.1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$predict.treat.0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){  dat.CV=rbind(dat.CV,dat.out.CV[[i]])}
# assess model performance
predcompare(repeats=20, Ngroups=c(5:10),
X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = dat.CV$predict.treat.1,
predicted.treat.0 = dat.CV$predict.treat.0,
treat=dat.CV$t, type="continuous")
# binary outcome
dat0=simbinary(800)$dat
head(dat0)
# Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
# Create random folds
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat.in.CV, family = binomial(link = "logit"))
dat.out.CV[[i]]$predict.treat.1=predict(newdata=dat1, glm1)# predictions in treatment
dat.out.CV[[i]]$predict.treat.0=predict(newdata=dat0, glm1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){  dat.CV=rbind(dat.CV,dat.out.CV[[i]])}
predcompare(repeats=20, Ngroups=c(5:10), X=dat2[,c("x1", "x2","x3")],
Y=dat2$y.observed,
predicted.treat.1 = dat2$predict.treat.1,
predicted.treat.0 = dat2$predict.treat.0,
treat=dat2$t, type="binary", measure="RD", bootstraps = 50)
predcompare(repeats=20, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = dat.CV$predict.treat.1,
predicted.treat.0 = dat.CV$predict.treat.0,
treat=dat.CV$t, type="binary", measure="RD", bootstraps = 50)
predcompare(repeats=20, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = dat.CV$predict.treat.1,
predicted.treat.0 = dat.CV$predict.treat.0,
treat=dat.CV$t, type="binary", measure="logor", bootstraps = 50)
library(devtools)
chcek()
check()
