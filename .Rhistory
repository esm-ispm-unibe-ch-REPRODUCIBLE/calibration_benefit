setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcompare")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcompare")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
load_all(".")
https://swcarpentry.github.io/r-novice-inflammation/08-making-packages-R/
library("devtools")
library("roxygen2")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
load_all(".")
simulate.data.binary(100)
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
load_all(".")
simulate.data.binary(100)
simulate.data.continuous(100)
simulate.data.cont(100)
predcompare()
bencalibr
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
load_all(".")
help(lm)
library(roxygen2);
roxygenise()
roxygenise()
roxygenise()
?simulate.data.cont
library(roxygen2)
roxygenise()
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
library(devtools) # Make sure that the devtools library is loaded
install_github("esm-ispm-unibe-ch-REPRODUCIBLE/calibration_benefit")
library(devtools) # Make sure that the devtools library is loaded
install_github("esm-ispm-unibe-ch-REPRODUCIBLE/calibration_benefit")
library(devtools) # Make sure that the devtools library is loaded
install_github("esm-ispm-unibe-ch-REPRODUCIBLE/calibration_benefit");
library(predcomp)
simulate.data.binary()
?simulate.data.binary
simulate(Npat = 100)
library(roxygen2)
roxygenise()
roxygenise()
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(roxygen2); # Read in the roxygen2 R package
roxygenise();      # Builds the help files
library(devtools) # Make sure that the devtools library is loaded
install_github("esm-ispm-unibe-ch-REPRODUCIBLE/calibration_benefit");
library(predcomp)
?simulate.data.binary
?simbinary
simbinary(100)
?predcompare
?bencalibr
simcont(1000)
simcont(1000)[1:2,]
library(predcomp)
simbinary(100)
simcont(1000)[1:2,]
?bencalibr
?simcont
expit=function(x){ exp(x)/(1 + exp(x))}
expit(-2)
logit=function(x){l=log(x/(1-x)); return(l)}
logit(0.2)
logit(0.5)
#' Simulate data for a prediction model of a binary outcome
#'
#' This generates
#' @param Npat Number of patients in the dataset
#' @return A dataframe with patient covariates ()
#' @examples
#' temp1 <- F_to_C(50);
#' temp2 <- F_to_C( c(50, 63, 23) );
#' @export
simbinary=function(Npat=100){
### simulate covariates
library(MASS)
expit=function(x){ exp(x)/(1 + exp(x))}
logit=function(x){l=log(x/(1-x)); return(l)}
# observed true predictors
x1x2<-mvrnorm(n = Npat, c(0,0), Sigma=matrix(c(1,0.2,0.2,1),2,2))
simdat <- data.frame(x1=x1x2[,1]) # continuous covariate 1
simdat$x2<-x1x2[,2] # continuous covariate 2
x3.lin <-rbinom(Npat, 1, prob = 0.2)
simdat$x3<-rbinom(Npat, 1, prob = expit(x3.lin) )
#unobserved true predictors
simdat$x4<-rnorm(Npat, 0, 1 )
## observed nuisance parameters
simdat$x5<-rnorm(Npat, 0, 1 )
simdat$x6<-rnorm(Npat, 0, 1 )
### simulate treatment assignment
pt <- 0.5 ## randomized
simdat$t <- rbinom(Npat, 1, prob = pt)
### outcome at control treatment
simdat$logit.control<- with(simdat, -2+0.2*x1+1*x2+0.6*x3+0.3*x4+
0.1*x1^2+0.2*x1*x4+0.2*x4*x4+
rnorm(Npat, 0, 0.1))
### treatment benefit
simdat$benefit<-with(simdat, -0.5-0.2*x1-0.1*x2+0.2*x3+0.2*x4+0.5*x1*x4+
0.1*x4*x2+0.1*x2*x3+0.1*x3*x4+
rnorm(Npat, 0, 0.05))
simdat$logit.active=with(simdat,logit.control+benefit)
simdat$logit.py=with(simdat,logit.control+t*benefit)
simdat$py<-expit(simdat$logit.py)
simdat$y.observed=rbinom(Npat, 1, prob=simdat$py)
return(list(dat=simdat))
}
simbinary(10)
#' This generates
#' @param Npat Number of patients in the dataset
#' @return A dataframe with: x1, x2, x3, x4, x5, x6= patient covariates.
#' t= treatment assignment (0 for control, 1 for active).
#' logit.control= the logit of the probability of an outcome in the control treatment.
#' logit.active= logit.control= the logit of the probability of an outcome in the active treatment.
#' @examples
#' temp1 <- F_to_C(50);
#' temp2 <- F_to_C( c(50, 63, 23) );
#' @export
simbinary=function(Npat=100){
### simulate covariates
library(MASS)
expit=function(x){ exp(x)/(1 + exp(x))}
logit=function(x){l=log(x/(1-x)); return(l)}
# observed true predictors
x1x2<-mvrnorm(n = Npat, c(0,0), Sigma=matrix(c(1,0.2,0.2,1),2,2))
simdat <- data.frame(x1=x1x2[,1]) # continuous covariate 1
simdat$x2<-x1x2[,2] # continuous covariate 2
x3.lin <-rbinom(Npat, 1, prob = 0.2)
simdat$x3<-rbinom(Npat, 1, prob = expit(x3.lin) )
#unobserved true predictors
simdat$x4<-rnorm(Npat, 0, 1 )
## observed nuisance parameters
simdat$x5<-rnorm(Npat, 0, 1 )
simdat$x6<-rnorm(Npat, 0, 1 )
### simulate treatment assignment
pt <- 0.5 ## randomized
simdat$t <- rbinom(Npat, 1, prob = pt)
### outcome at control treatment
simdat$logit.control<- with(simdat, -2+0.2*x1+1*x2+0.6*x3+0.3*x4+
0.1*x1^2+0.2*x1*x4+0.2*x4*x4+
rnorm(Npat, 0, 0.1))
### treatment benefit
simdat$benefit<-with(simdat, -0.5-0.2*x1-0.1*x2+0.2*x3+0.2*x4+0.5*x1*x4+
0.1*x4*x2+0.1*x2*x3+0.1*x3*x4+
rnorm(Npat, 0, 0.05))
simdat$logit.active=with(simdat,logit.control+benefit)
simdat$logit.py=with(simdat,logit.control+t*benefit)
simdat$py<-expit(simdat$logit.py)
simdat$y.observed=rbinom(Npat, 1, prob=simdat$py)
return(list(dat=simdat))
}
dat=simdat(100)$dat
dat=simbinary(100)$dat
dat
colnames(dat)
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/calibration_benefit")
load_all(".")
library("devtools")
library("roxygen2")
load_all(".")
?bencalibr
?simbinary
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/calibration_benefit")
load_all(".")
?simbinary
document()
?simbinary
library("devtools")
library("roxygen2")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
document()
load_all(".")
simulate.data.cont(100)
?simbinary
library("devtools")
library("roxygen2")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
document()
load_all(".")
simulate.data.cont(100)
?simbinary
simbinary(20)
?expit
library("devtools")
library("roxygen2")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
document()
load_all(".")
simbinary(20)
?simbinary
?expit
library("devtools")
library("roxygen2")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
document()
load_all(".")
simbinary(20)
?simbinary
?expit
simcont(100)
simcont(1)
simcont(2)
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
document()
load_all(".")
simbinary(20)
?simbinary
?expit
?simcont
?simbin
?simbinary
library(predcomp)
uninstall(pkg="predcomp")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/R code calibration for benefit/predcomp")
document()
load_all(".")
simbinary(20)
?simbinary
?expit
?simbinary
?simcont
?logit
